MODEL = "claude-3-5-sonnet-20241022"
INTERVEW_AI_MAX_TOKENS = 4000
INTERVEW_AI_TEMPERATURE = 0.6
INTERVIEW_AI_EXAMPLES = {
"type": "text",
"text": "<examples>\n<example>\n<example_description>\nIntroduction and Interview Preparation \n</example_description>\n<INTERVIEW_PROMPT>\nHi, I am interviewing for a Unreal Engine 5 Game Developer position at Electronic Arts. I would like to be as prepared as possible for the interview.\n</INTERVIEW_PROMPT>\n<ideal_output>\n<answer>\n# Unreal Engine 5 Game Developer Interview Preparation\n\n## Technical Knowledge Areas\n\n### Core UE5 Features\n- Lumen Global Illumination System\n  * Be prepared to explain how it works\n  * Discuss performance implications and optimization\n  * Compare with traditional lighting solutions\n\n### Blueprint System\n* Demonstrate understanding of:\n  * Visual scripting fundamentals\n  * Blueprint communication methods\n  * Performance considerations vs C++\n  * Best practices for Blueprint architecture\n\n### C++ Proficiency\n* Key topics:\n  * UE5's implementation of C++\n  * Smart pointers and memory management\n  * Game Framework classes\n  * Component architecture\n  * Networking basics\n\n## Technical Questions to Prepare For\n\n### Common Technical Questions\n1. \"Explain the difference between Nanite and traditional LOD systems\"\n2. \"How would you optimize a large open-world game in UE5?\"\n3. \"Describe your experience with UE5's networking framework\"\n4. \"How do you decide between using Blueprints vs C++?\"\n\n### Practical Skills\n- Be ready to:\n  * Read and debug Blueprint systems\n  * Analyze performance bottlenecks\n  * Discuss real-time rendering techniques\n  * Explain game optimization strategies\n\n## Portfolio Preparation\n1. Highlight relevant UE5 projects\n2. Prepare technical deep-dives for:\n   * Challenging problems you've solved\n   * Performance optimizations\n   * Innovative features implemented\n\n## EA-Specific Preparation\n\n### Company Research\n* Study EA's:\n  * Current game engines and technology\n  * Recent game releases\n  * Technical challenges in their games\n  * Development culture and methodologies\n\n### Behavioral Preparation\n* Focus on examples demonstrating:\n  * Team collaboration\n  * Problem-solving\n  * Meeting deadlines\n  * Handling technical challenges\n\n## Interview Tips\n\n### Do's\n* Show passion for game development\n* Discuss personal projects\n* Ask thoughtful questions about their technology stack\n* Demonstrate knowledge of current gaming trends\n\n### Don'ts\n* Don't criticize previous employers\n* Avoid discussing confidential information\n* Don't exaggerate technical capabilities\n* Don't focus solely on technical skills; soft skills matter\n\n## Questions to Ask Interviewer\n1. \"What challenges does the team face with UE5 implementation?\"\n2. \"How does the team approach performance optimization?\"\n3. \"What's the balance between Blueprint and C++ development?\"\n4. \"How does the team handle version control with UE5?\"\n\n## Technical Assessment Preparation\n1. Practice common coding challenges\n2. Review Blueprint debugging techniques\n3. Prepare for live coding exercises\n4. Study system design principles\n\nRemember to stay calm, be honest about your experience level, and focus on demonstrating both your technical knowledge and your passion for game development.\n\n## Additional Resources\n- Review UE5 documentation\n- Practice with UE5 sample projects\n- Study EA's technical blogs\n- Join UE5 developer communities\n\n</answer>\n</ideal_output>\n</example>\n<example>\n<example_description>\nInterview Process prompt\n</example_description>\n<INTERVIEW_PROMPT>\nHi, I am interviewing for a Full-Stack Developer position at Devsinc. I would like to know what the interview process is like.\n</INTERVIEW_PROMPT>\n<ideal_output>\n<answer>\n# Full-Stack Developer Interview Process Guide\n\n## General Interview Process at Devsinc\nBased on common industry practices for Full-Stack Developer positions, here's what you can typically expect:\n\n### 1. Initial Screening Round\n- Phone or video call with HR/recruiter\n- Basic questions about your background and experience\n- Discussion of your resume and portfolio\n- High-level technical questions to verify your claimed skills\n\n### 2. Technical Assessment\n- Online coding challenge or take-home project\n- Data structures and algorithms problems\n- Frontend and backend coding tasks\n- Time-boxed programming assignments\n\n### 3. Technical Interview Rounds\n#### Frontend Skills Assessment\n- JavaScript fundamentals\n- React/Angular/Vue.js knowledge\n- HTML5/CSS3 capabilities\n- Frontend performance optimization\n- State management\n\n#### Backend Skills Assessment\n- Server-side programming (Node.js, Python, Java, etc.)\n- Database design and queries\n- API design principles\n- System architecture\n- Security best practices\n\n### 4. System Design Round\n- Designing scalable applications\n- Architecture discussions\n- Database schema design\n- API planning\n- Performance considerations\n\n### 5. Cultural Fit/Behavioral Interview\n- Team collaboration scenarios\n- Problem-solving approach\n- Past project experiences\n- Conflict resolution\n- Career goals\n\n## Key Preparation Tips\n\n### Technical Preparation\n- Review full-stack fundamentals\n- Practice coding on platforms like LeetCode/HackerRank\n- Brush up on system design concepts\n- Prepare your portfolio and code samples\n\n### Behavioral Preparation\n- Research Devsinc's culture and values\n- Prepare STAR method responses\n- Document your significant projects\n- Ready questions about the team and work\n\n## Common Areas to Focus On\n1. JavaScript ecosystem\n2. Modern frontend frameworks\n3. Backend technologies\n4. Database management\n5. RESTful APIs\n6. Version control (Git)\n7. Testing methodologies\n8. CI/CD practices\n\n## Pro Tips\n- Showcase personal projects\n- Highlight problem-solving abilities\n- Demonstrate continuous learning\n- Be prepared to explain technical decisions\n- Show enthusiasm for technology\n\nRemember: Interview processes may vary, but being prepared for all these aspects will help you perform confidently.\n\n*Note: This is a general guide based on industry standards. The actual process at Devsinc may differ.*\n</answer>\n</ideal_output>\n</example>\n<example>\n<example_description>\nCompany Details\n</example_description>\n<INTERVIEW_PROMPT>\nHi, I am interviewing for a HR Manager position at Devsinc. I would like to know more about the company to be more prepared for the interview.\n</INTERVIEW_PROMPT>\n<ideal_output>\n<answer>\n# Company Research Guide for Devsinc Interview\n\n## Company Overview\nDevsinc (Development Solutions Inc.) is a global software development and technology consulting company that specializes in providing custom software solutions and IT services. They work with clients across various industries and have offices in multiple locations.\n\n## Key Areas to Research\n\n### Company Basics\n* Founded year and growth trajectory\n* Office locations (including headquarters and global presence)\n* Size of workforce and organizational structure\n* Core services and technology expertise\n\n### Business Focus\n* Custom software development\n* Digital transformation solutions\n* Technology consulting\n* Enterprise solutions\n* Mobile app development\n* Cloud services\n\n### Company Culture\n* Focus on innovation and continuous learning\n* Collaborative work environment\n* Global team structure\n* Professional development opportunities\n\n## How to Use This Information in Your HR Manager Interview\n\n### Connect Your Experience\n* Highlight any experience managing HR functions in tech companies\n* Discuss experience with global workforce management\n* Emphasize expertise in talent acquisition for technical roles\n* Showcase knowledge of HR practices in fast-growing companies\n\n### Prepare Relevant Questions\n* \"How does the HR department support Devsinc's rapid growth?\"\n* \"What are the key HR challenges in managing a global tech workforce?\"\n* \"How does HR contribute to maintaining company culture across different locations?\"\n* \"What are the primary talent acquisition goals for the next year?\"\n\n### Research Tips\n* Review Devsinc's official website thoroughly\n* Check their LinkedIn company page\n* Read recent news articles or press releases\n* Review their Glassdoor profile for company insights\n* Connect with current employees on LinkedIn if possible\n\n## Important Note\nThis information is based on publicly available data. During your interview:\n* Focus on demonstrating your understanding of HR challenges in tech companies\n* Show enthusiasm for the technology sector\n* Prepare examples of relevant HR initiatives you've led\n* Be ready to discuss modern HR practices and tools\n\nRemember to verify this information through official sources as company details may change over time.\n\n## Additional Preparation Tips\n* Research current trends in tech industry HR practices\n* Review common HR metrics used in software companies\n* Prepare examples of cross-cultural HR management\n* Understand the basics of software development lifecycle\n* Be ready to discuss remote work policies and practices\n\nRemember to combine this company knowledge with your HR expertise to show how you can add value to Devsinc's growth and success.\n\n</answer>\n</ideal_output>\n</example>\n<example>\n<example_description>\nInterview recommendations\n</example_description>\n<INTERVIEW_PROMPT>\nHi, I am interviewing for a PHP Developer position at ABC. Do you have any recommendations for me?\n</INTERVIEW_PROMPT>\n<ideal_output>\n<answer>\n# PHP Developer Interview Preparation Guide\n\n## Technical Knowledge Essentials\n\n### Core PHP Concepts\n* PHP fundamentals (variables, data types, operators)\n* OOP principles in PHP\n* Error handling and debugging\n* Sessions and cookies management\n* Security best practices (SQL injection, XSS prevention)\n\n### Common PHP Interview Questions\n1. What's the difference between `==` and `===` in PHP?\n2. Explain PHP sessions vs. cookies\n3. How do you prevent SQL injection?\n4. What are traits in PHP?\n\n### Framework Knowledge\n* Laravel/Symfony experience\n* MVC architecture understanding\n* RESTful API development\n* Database integration (MySQL/PostgreSQL)\n\n## Practical Skills to Highlight\n\n### Code Examples to Review\n* Basic CRUD operations\n* Authentication systems\n* API integration\n* Database optimization\n\n### Best Practices\n* PSR standards\n* Code documentation\n* Version control (Git)\n* Testing methodologies\n\n## Interview Tips\n\n### Technical Assessment Preparation\n* Practice coding on platforms like LeetCode/HackerRank\n* Review your previous PHP projects\n* Prepare code samples demonstrating your skills\n* Be ready for live coding exercises\n\n### Behavioral Questions\n* Describe challenging projects you've worked on\n* Explain how you handle code reviews\n* Share your debugging process\n* Discuss team collaboration experiences\n\n## Common Mistakes to Avoid\n* Not testing your code before interviews\n* Neglecting to discuss security considerations\n* Forgetting to mention version control experience\n* Overlooking performance optimization\n\n## Questions to Ask Interviewer\n* Tech stack details\n* Development workflow\n* Code review process\n* Team structure and collaboration\n\n## Preparation Checklist\n1. Review PHP 7+ features\n2. Practice problem-solving\n3. Prepare project examples\n4. Study common algorithms\n5. Refresh on design patterns\n\nRemember to:\n- Stay calm during technical assessments\n- Explain your thought process while coding\n- Ask clarifying questions when needed\n- Highlight your problem-solving approach\n\n</answer>\n</ideal_output>\n</example>\n<example>\n<INTERVIEW_PROMPT>\nDesign a simple to-do list application using Python. The application should allow users to add, edit, delete, and view tasks, along with marking tasks as completed. Implement a feature to save and load tasks from a file.\n</INTERVIEW_PROMPT>\n<ideal_output>\n<answer>\n# Python To-Do List Application Design\n\n## System Requirements Analysis\n- Add, edit, delete, and view tasks\n- Mark tasks as complete/incomplete\n- Persistent storage using file I/O\n- Simple command-line interface\n\n## Example Implementation\n\n```python\nimport json\nfrom datetime import datetime\n\nclass ToDoList:\n    def __init__(self):\n        self.tasks = []\n        self.filename = \"tasks.json\"\n        self.load_tasks()\n\n    def add_task(self, description):\n        task = {\n            \"id\": len(self.tasks) + 1,\n            \"description\": description,\n            \"completed\": False,\n            \"created_at\": datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        }\n        self.tasks.append(task)\n        self.save_tasks()\n        return \"Task added successfully!\"\n\n    def view_tasks(self):\n        if not self.tasks:\n            return \"No tasks found.\"\n        \n        output = \"\\nTasks:\\n\"\n        for task in self.tasks:\n            status = \"✓\" if task[\"completed\"] else \" \"\n            output += f\"[{status}] {task['id']}. {task['description']}\\n\"\n        return output\n\n    def edit_task(self, task_id, new_description):\n        for task in self.tasks:\n            if task[\"id\"] == task_id:\n                task[\"description\"] = new_description\n                self.save_tasks()\n                return \"Task updated successfully!\"\n        return \"Task not found.\"\n\n    def delete_task(self, task_id):\n        for task in self.tasks:\n            if task[\"id\"] == task_id:\n                self.tasks.remove(task)\n                self.save_tasks()\n                return \"Task deleted successfully!\"\n        return \"Task not found.\"\n\n    def toggle_complete(self, task_id):\n        for task in self.tasks:\n            if task[\"id\"] == task_id:\n                task[\"completed\"] = not task[\"completed\"]\n                self.save_tasks()\n                return \"Task status updated!\"\n        return \"Task not found.\"\n\n    def save_tasks(self):\n        with open(self.filename, 'w') as f:\n            json.dump(self.tasks, f)\n\n    def load_tasks(self):\n        try:\n            with open(self.filename, 'r') as f:\n                self.tasks = json.load(f)\n        except FileNotFoundError:\n            self.tasks = []\n\ndef main():\n    todo = ToDoList()\n    \n    while True:\n        print(\"\\n=== To-Do List Application ===\")\n        print(\"1. Add Task\")\n        print(\"2. View Tasks\")\n        print(\"3. Edit Task\")\n        print(\"4. Delete Task\")\n        print(\"5. Toggle Task Complete\")\n        print(\"6. Exit\")\n        \n        choice = input(\"Enter your choice (1-6): \")\n        \n        if choice == \"1\":\n            description = input(\"Enter task description: \")\n            print(todo.add_task(description))\n        \n        elif choice == \"2\":\n            print(todo.view_tasks())\n        \n        elif choice == \"3\":\n            task_id = int(input(\"Enter task ID: \"))\n            new_description = input(\"Enter new description: \")\n            print(todo.edit_task(task_id, new_description))\n        \n        elif choice == \"4\":\n            task_id = int(input(\"Enter task ID: \"))\n            print(todo.delete_task(task_id))\n        \n        elif choice == \"5\":\n            task_id = int(input(\"Enter task ID: \"))\n            print(todo.toggle_complete(task_id))\n        \n        elif choice == \"6\":\n            print(\"Goodbye!\")\n            break\n        \n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Key Design Points to Highlight\n\n1. **Class Structure**\n- Organized code using OOP principles\n- Clear separation of concerns\n- Methods for each CRUD operation\n\n2. **Data Persistence**\n- JSON file storage for tasks\n- Load/save functionality\n- Error handling for file operations\n\n3. **Task Management**\n- Unique IDs for tasks\n- Timestamp for creation\n- Status tracking (completed/incomplete)\n\n4. **User Interface**\n- Simple command-line menu\n- Clear user prompts\n- Input validation\n\n## Potential Interview Discussion Points\n\n1. **Design Choices**\n- Why choose JSON for storage?\n- How would you scale this for multiple users?\n- What additional features could be added?\n\n2. **Code Improvements**\n- Error handling enhancements\n- Input validation methods\n- Testing strategies\n\n3. **Alternative Approaches**\n- Database implementation\n- GUI interface\n- Web-based version\n\n## Common Follow-up Questions\n\n1. How would you implement:\n- Task priorities?\n- Due dates?\n- Categories/tags?\n\n2. How would you handle:\n- Concurrent users?\n- Data backup?\n- Task searching/filtering?\n\nRemember to discuss the trade-offs of your design choices and potential improvements for a production environment.\n</answer>\n</ideal_output>\n</example>\n<example>\n<INTERVIEW_PROMPT>\nWhat are some of the unique technical challenges Unity developers face when building cross-platform games?\n</INTERVIEW_PROMPT>\n<ideal_output>\n<answer>\n# Technical Challenges in Unity Cross-Platform Development\n\n## Performance Optimization\n- **Hardware Variations**\n  * Managing different CPU/GPU capabilities across devices\n  * Optimizing assets and textures for low-end mobile devices\n  * Implementing dynamic quality settings based on platform detection\n\n- **Memory Management**\n  * Handling memory constraints on mobile platforms\n  * Asset bundling and loading strategies per platform\n  * Garbage collection considerations for different platforms\n\n## Platform-Specific Considerations\n\n### Mobile Platforms\n- Battery life optimization\n- Touch input handling vs keyboard/mouse\n- Screen resolution and aspect ratio adaptation\n- Thermal throttling management\n- Platform-specific APIs (iOS/Android)\n\n### Console Development\n- Certification requirements\n- Hardware-specific features\n- Performance targets and frame rate stability\n- Memory budget management\n\n## Common Technical Solutions\n\n### Asset Management\n```csharp\n#if UNITY_ANDROID\n    // Android-specific asset loading\n#elif UNITY_IOS\n    // iOS-specific asset loading\n#endif\n```\n\n### Input System Adaptations\n- Implementing input abstraction layers\n- Supporting multiple input methods simultaneously\n- Platform-specific control schemes\n\n## Critical Considerations\n\n### Testing Strategy\n* Device-specific testing protocols\n* Platform-specific bug tracking\n* Automated testing across platforms\n\n### Build Pipeline\n- Managing build settings per platform\n- Platform-specific preprocessing directives\n- Asset pipeline optimization\n\n## Best Practices\n\n1. **Early Architecture Planning**\n   - Design with platform differences in mind\n   - Implement abstraction layers for platform-specific features\n   - Use scalable asset management systems\n\n2. **Performance Profiling**\n   - Regular testing on target platforms\n   - Platform-specific performance metrics\n   - Memory usage monitoring\n\n3. **Code Organization**\n   - Clear separation of platform-specific code\n   - Modular architecture for easy maintenance\n   - Consistent naming conventions across platforms\n\n## Common Pitfalls to Avoid\n\n- Assuming uniform performance across platforms\n- Neglecting platform-specific optimizations\n- Insufficient testing on target devices\n- Ignoring platform-specific user experience patterns\n\n## Technical Implementation Tips\n\n1. Use Platform-Dependent Compilation:\n```csharp\n#if UNITY_EDITOR\n    Debug.Log(\"Editor-only code\");\n#endif\n```\n\n2. Implement Resource Loading Strategy:\n```csharp\npublic class ResourceLoader {\n    public T LoadAsset<T>(string path) {\n        #if UNITY_ANDROID\n            return LoadAndroidAsset<T>(path);\n        #else\n            return LoadDefaultAsset<T>(path);\n        #endif\n    }\n}\n```\n\nThis knowledge demonstrates understanding of:\n- Cross-platform development complexities\n- Platform-specific optimization techniques\n- Technical problem-solving approaches\n- Real-world development scenarios\n\nRemember to emphasize practical experience with these challenges during the interview, providing specific examples from past projects when possible.\n</answer>\n</ideal_output>\n</example>\n<example>\n<example_description>\n Ideal output for Unrelated prompts.\n</example_description>\n<INTERVIEW_PROMPT>\nCompare the Bugatti Chiron Super Sport and LaFerrari in terms of performance, design, technology, and exclusivity. Highlight their engine specifications, top speeds, acceleration, unique features, and overall driving experience. Additionally, discuss their pricing, production numbers, and appeal to automotive enthusiasts.\n</INTERVIEW_PROMPT>\n<ideal_output>\nI notice this prompt is about comparing luxury vehicles, which isn't related to job interview preparation. I'd be happy to help you with interview-related topics instead. For example, I can assist with:\n\n1. Preparing for automotive industry job interviews\n2. Discussing how to answer technical questions for positions at luxury car manufacturers\n3. Practicing behavioral questions for roles in vehicle engineering or sales\n4. Developing responses about your passion for automobiles in a professional context\n\nWould you like to rephrase your question to focus on interview preparation for automotive industry positions?\n</ideal_output>\n</example>\n</examples>\n\n"
}

